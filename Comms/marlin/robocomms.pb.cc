// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robocomms.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "robocomms.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RoboComms {

namespace {

const ::google::protobuf::Descriptor* RoboReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoboReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoboReq_MoveBaseCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoboReq_MoveBaseCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoboReq_MoveLiftCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoboReq_MoveLiftCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoboReq_MoveSensCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoboReq_MoveSensCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoboReq_DataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoboReq_DataReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoboReq_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RoboRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoboRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoboRes_DataRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoboRes_DataRes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoboRes_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_robocomms_2eproto() {
  protobuf_AddDesc_robocomms_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "robocomms.proto");
  GOOGLE_CHECK(file != NULL);
  RoboReq_descriptor_ = file->message_type(0);
  static const int RoboReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq, lift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq, sens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq, data_),
  };
  RoboReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoboReq_descriptor_,
      RoboReq::default_instance_,
      RoboReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoboReq));
  RoboReq_MoveBaseCmd_descriptor_ = RoboReq_descriptor_->nested_type(0);
  static const int RoboReq_MoveBaseCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq_MoveBaseCmd, cmd_),
  };
  RoboReq_MoveBaseCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoboReq_MoveBaseCmd_descriptor_,
      RoboReq_MoveBaseCmd::default_instance_,
      RoboReq_MoveBaseCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq_MoveBaseCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq_MoveBaseCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoboReq_MoveBaseCmd));
  RoboReq_MoveLiftCmd_descriptor_ = RoboReq_descriptor_->nested_type(1);
  static const int RoboReq_MoveLiftCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq_MoveLiftCmd, cmd_),
  };
  RoboReq_MoveLiftCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoboReq_MoveLiftCmd_descriptor_,
      RoboReq_MoveLiftCmd::default_instance_,
      RoboReq_MoveLiftCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq_MoveLiftCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq_MoveLiftCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoboReq_MoveLiftCmd));
  RoboReq_MoveSensCmd_descriptor_ = RoboReq_descriptor_->nested_type(2);
  static const int RoboReq_MoveSensCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq_MoveSensCmd, cmd_),
  };
  RoboReq_MoveSensCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoboReq_MoveSensCmd_descriptor_,
      RoboReq_MoveSensCmd::default_instance_,
      RoboReq_MoveSensCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq_MoveSensCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq_MoveSensCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoboReq_MoveSensCmd));
  RoboReq_DataReq_descriptor_ = RoboReq_descriptor_->nested_type(3);
  static const int RoboReq_DataReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq_DataReq, cmd_),
  };
  RoboReq_DataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoboReq_DataReq_descriptor_,
      RoboReq_DataReq::default_instance_,
      RoboReq_DataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq_DataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboReq_DataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoboReq_DataReq));
  RoboReq_Type_descriptor_ = RoboReq_descriptor_->enum_type(0);
  RoboRes_descriptor_ = file->message_type(1);
  static const int RoboRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboRes, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboRes, data_),
  };
  RoboRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoboRes_descriptor_,
      RoboRes::default_instance_,
      RoboRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoboRes));
  RoboRes_DataRes_descriptor_ = RoboRes_descriptor_->nested_type(0);
  static const int RoboRes_DataRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboRes_DataRes, res_),
  };
  RoboRes_DataRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoboRes_DataRes_descriptor_,
      RoboRes_DataRes::default_instance_,
      RoboRes_DataRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboRes_DataRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoboRes_DataRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoboRes_DataRes));
  RoboRes_Type_descriptor_ = RoboRes_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_robocomms_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoboReq_descriptor_, &RoboReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoboReq_MoveBaseCmd_descriptor_, &RoboReq_MoveBaseCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoboReq_MoveLiftCmd_descriptor_, &RoboReq_MoveLiftCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoboReq_MoveSensCmd_descriptor_, &RoboReq_MoveSensCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoboReq_DataReq_descriptor_, &RoboReq_DataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoboRes_descriptor_, &RoboRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoboRes_DataRes_descriptor_, &RoboRes_DataRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_robocomms_2eproto() {
  delete RoboReq::default_instance_;
  delete RoboReq_reflection_;
  delete RoboReq_MoveBaseCmd::default_instance_;
  delete RoboReq_MoveBaseCmd_reflection_;
  delete RoboReq_MoveLiftCmd::default_instance_;
  delete RoboReq_MoveLiftCmd_reflection_;
  delete RoboReq_MoveSensCmd::default_instance_;
  delete RoboReq_MoveSensCmd_reflection_;
  delete RoboReq_DataReq::default_instance_;
  delete RoboReq_DataReq_reflection_;
  delete RoboRes::default_instance_;
  delete RoboRes_reflection_;
  delete RoboRes_DataRes::default_instance_;
  delete RoboRes_DataRes_reflection_;
}

void protobuf_AddDesc_robocomms_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017robocomms.proto\022\tRoboComms\"\204\003\n\007RoboReq"
    "\022%\n\004type\030\001 \002(\0162\027.RoboComms.RoboReq.Type\022"
    ",\n\004base\030\002 \001(\0132\036.RoboComms.RoboReq.MoveBa"
    "seCmd\022,\n\004lift\030\003 \001(\0132\036.RoboComms.RoboReq."
    "MoveLiftCmd\022,\n\004sens\030\004 \001(\0132\036.RoboComms.Ro"
    "boReq.MoveSensCmd\022(\n\004data\030\005 \001(\0132\032.RoboCo"
    "mms.RoboReq.DataReq\032\032\n\013MoveBaseCmd\022\013\n\003cm"
    "d\030\001 \001(\014\032\032\n\013MoveLiftCmd\022\013\n\003cmd\030\001 \001(\014\032\032\n\013M"
    "oveSensCmd\022\013\n\003cmd\030\001 \001(\014\032\026\n\007DataReq\022\013\n\003cm"
    "d\030\001 \001(\t\"2\n\004Type\022\t\n\005MBASE\020\000\022\t\n\005MLIFT\020\001\022\t\n"
    "\005MSENS\020\002\022\t\n\005RDATA\020\003\"\205\001\n\007RoboRes\022%\n\004type\030"
    "\001 \002(\0162\027.RoboComms.RoboRes.Type\022(\n\004data\030\002"
    " \001(\0132\032.RoboComms.RoboRes.DataRes\032\026\n\007Data"
    "Res\022\013\n\003res\030\001 \001(\t\"\021\n\004Type\022\t\n\005DATAR\020\000B\035\n\020s"
    "wordfish.modelsB\tRoboComms", 586);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robocomms.proto", &protobuf_RegisterTypes);
  RoboReq::default_instance_ = new RoboReq();
  RoboReq_MoveBaseCmd::default_instance_ = new RoboReq_MoveBaseCmd();
  RoboReq_MoveLiftCmd::default_instance_ = new RoboReq_MoveLiftCmd();
  RoboReq_MoveSensCmd::default_instance_ = new RoboReq_MoveSensCmd();
  RoboReq_DataReq::default_instance_ = new RoboReq_DataReq();
  RoboRes::default_instance_ = new RoboRes();
  RoboRes_DataRes::default_instance_ = new RoboRes_DataRes();
  RoboReq::default_instance_->InitAsDefaultInstance();
  RoboReq_MoveBaseCmd::default_instance_->InitAsDefaultInstance();
  RoboReq_MoveLiftCmd::default_instance_->InitAsDefaultInstance();
  RoboReq_MoveSensCmd::default_instance_->InitAsDefaultInstance();
  RoboReq_DataReq::default_instance_->InitAsDefaultInstance();
  RoboRes::default_instance_->InitAsDefaultInstance();
  RoboRes_DataRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_robocomms_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_robocomms_2eproto {
  StaticDescriptorInitializer_robocomms_2eproto() {
    protobuf_AddDesc_robocomms_2eproto();
  }
} static_descriptor_initializer_robocomms_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* RoboReq_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoboReq_Type_descriptor_;
}
bool RoboReq_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RoboReq_Type RoboReq::MBASE;
const RoboReq_Type RoboReq::MLIFT;
const RoboReq_Type RoboReq::MSENS;
const RoboReq_Type RoboReq::RDATA;
const RoboReq_Type RoboReq::Type_MIN;
const RoboReq_Type RoboReq::Type_MAX;
const int RoboReq::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RoboReq_MoveBaseCmd::kCmdFieldNumber;
#endif  // !_MSC_VER

RoboReq_MoveBaseCmd::RoboReq_MoveBaseCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoboReq_MoveBaseCmd::InitAsDefaultInstance() {
}

RoboReq_MoveBaseCmd::RoboReq_MoveBaseCmd(const RoboReq_MoveBaseCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoboReq_MoveBaseCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoboReq_MoveBaseCmd::~RoboReq_MoveBaseCmd() {
  SharedDtor();
}

void RoboReq_MoveBaseCmd::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void RoboReq_MoveBaseCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoboReq_MoveBaseCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoboReq_MoveBaseCmd_descriptor_;
}

const RoboReq_MoveBaseCmd& RoboReq_MoveBaseCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robocomms_2eproto();
  return *default_instance_;
}

RoboReq_MoveBaseCmd* RoboReq_MoveBaseCmd::default_instance_ = NULL;

RoboReq_MoveBaseCmd* RoboReq_MoveBaseCmd::New() const {
  return new RoboReq_MoveBaseCmd;
}

void RoboReq_MoveBaseCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoboReq_MoveBaseCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoboReq_MoveBaseCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoboReq_MoveBaseCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes cmd = 1;
  if (has_cmd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoboReq_MoveBaseCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoboReq_MoveBaseCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoboReq_MoveBaseCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoboReq_MoveBaseCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoboReq_MoveBaseCmd::MergeFrom(const RoboReq_MoveBaseCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoboReq_MoveBaseCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoboReq_MoveBaseCmd::CopyFrom(const RoboReq_MoveBaseCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoboReq_MoveBaseCmd::IsInitialized() const {

  return true;
}

void RoboReq_MoveBaseCmd::Swap(RoboReq_MoveBaseCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoboReq_MoveBaseCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoboReq_MoveBaseCmd_descriptor_;
  metadata.reflection = RoboReq_MoveBaseCmd_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RoboReq_MoveLiftCmd::kCmdFieldNumber;
#endif  // !_MSC_VER

RoboReq_MoveLiftCmd::RoboReq_MoveLiftCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoboReq_MoveLiftCmd::InitAsDefaultInstance() {
}

RoboReq_MoveLiftCmd::RoboReq_MoveLiftCmd(const RoboReq_MoveLiftCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoboReq_MoveLiftCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoboReq_MoveLiftCmd::~RoboReq_MoveLiftCmd() {
  SharedDtor();
}

void RoboReq_MoveLiftCmd::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void RoboReq_MoveLiftCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoboReq_MoveLiftCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoboReq_MoveLiftCmd_descriptor_;
}

const RoboReq_MoveLiftCmd& RoboReq_MoveLiftCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robocomms_2eproto();
  return *default_instance_;
}

RoboReq_MoveLiftCmd* RoboReq_MoveLiftCmd::default_instance_ = NULL;

RoboReq_MoveLiftCmd* RoboReq_MoveLiftCmd::New() const {
  return new RoboReq_MoveLiftCmd;
}

void RoboReq_MoveLiftCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoboReq_MoveLiftCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoboReq_MoveLiftCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoboReq_MoveLiftCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes cmd = 1;
  if (has_cmd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoboReq_MoveLiftCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoboReq_MoveLiftCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoboReq_MoveLiftCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoboReq_MoveLiftCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoboReq_MoveLiftCmd::MergeFrom(const RoboReq_MoveLiftCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoboReq_MoveLiftCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoboReq_MoveLiftCmd::CopyFrom(const RoboReq_MoveLiftCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoboReq_MoveLiftCmd::IsInitialized() const {

  return true;
}

void RoboReq_MoveLiftCmd::Swap(RoboReq_MoveLiftCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoboReq_MoveLiftCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoboReq_MoveLiftCmd_descriptor_;
  metadata.reflection = RoboReq_MoveLiftCmd_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RoboReq_MoveSensCmd::kCmdFieldNumber;
#endif  // !_MSC_VER

RoboReq_MoveSensCmd::RoboReq_MoveSensCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoboReq_MoveSensCmd::InitAsDefaultInstance() {
}

RoboReq_MoveSensCmd::RoboReq_MoveSensCmd(const RoboReq_MoveSensCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoboReq_MoveSensCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoboReq_MoveSensCmd::~RoboReq_MoveSensCmd() {
  SharedDtor();
}

void RoboReq_MoveSensCmd::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void RoboReq_MoveSensCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoboReq_MoveSensCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoboReq_MoveSensCmd_descriptor_;
}

const RoboReq_MoveSensCmd& RoboReq_MoveSensCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robocomms_2eproto();
  return *default_instance_;
}

RoboReq_MoveSensCmd* RoboReq_MoveSensCmd::default_instance_ = NULL;

RoboReq_MoveSensCmd* RoboReq_MoveSensCmd::New() const {
  return new RoboReq_MoveSensCmd;
}

void RoboReq_MoveSensCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoboReq_MoveSensCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoboReq_MoveSensCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoboReq_MoveSensCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes cmd = 1;
  if (has_cmd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoboReq_MoveSensCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoboReq_MoveSensCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoboReq_MoveSensCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoboReq_MoveSensCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoboReq_MoveSensCmd::MergeFrom(const RoboReq_MoveSensCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoboReq_MoveSensCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoboReq_MoveSensCmd::CopyFrom(const RoboReq_MoveSensCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoboReq_MoveSensCmd::IsInitialized() const {

  return true;
}

void RoboReq_MoveSensCmd::Swap(RoboReq_MoveSensCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoboReq_MoveSensCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoboReq_MoveSensCmd_descriptor_;
  metadata.reflection = RoboReq_MoveSensCmd_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RoboReq_DataReq::kCmdFieldNumber;
#endif  // !_MSC_VER

RoboReq_DataReq::RoboReq_DataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoboReq_DataReq::InitAsDefaultInstance() {
}

RoboReq_DataReq::RoboReq_DataReq(const RoboReq_DataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoboReq_DataReq::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoboReq_DataReq::~RoboReq_DataReq() {
  SharedDtor();
}

void RoboReq_DataReq::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void RoboReq_DataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoboReq_DataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoboReq_DataReq_descriptor_;
}

const RoboReq_DataReq& RoboReq_DataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robocomms_2eproto();
  return *default_instance_;
}

RoboReq_DataReq* RoboReq_DataReq::default_instance_ = NULL;

RoboReq_DataReq* RoboReq_DataReq::New() const {
  return new RoboReq_DataReq;
}

void RoboReq_DataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoboReq_DataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoboReq_DataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoboReq_DataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoboReq_DataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoboReq_DataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoboReq_DataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoboReq_DataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoboReq_DataReq::MergeFrom(const RoboReq_DataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoboReq_DataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoboReq_DataReq::CopyFrom(const RoboReq_DataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoboReq_DataReq::IsInitialized() const {

  return true;
}

void RoboReq_DataReq::Swap(RoboReq_DataReq* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoboReq_DataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoboReq_DataReq_descriptor_;
  metadata.reflection = RoboReq_DataReq_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RoboReq::kTypeFieldNumber;
const int RoboReq::kBaseFieldNumber;
const int RoboReq::kLiftFieldNumber;
const int RoboReq::kSensFieldNumber;
const int RoboReq::kDataFieldNumber;
#endif  // !_MSC_VER

RoboReq::RoboReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoboReq::InitAsDefaultInstance() {
  base_ = const_cast< ::RoboComms::RoboReq_MoveBaseCmd*>(&::RoboComms::RoboReq_MoveBaseCmd::default_instance());
  lift_ = const_cast< ::RoboComms::RoboReq_MoveLiftCmd*>(&::RoboComms::RoboReq_MoveLiftCmd::default_instance());
  sens_ = const_cast< ::RoboComms::RoboReq_MoveSensCmd*>(&::RoboComms::RoboReq_MoveSensCmd::default_instance());
  data_ = const_cast< ::RoboComms::RoboReq_DataReq*>(&::RoboComms::RoboReq_DataReq::default_instance());
}

RoboReq::RoboReq(const RoboReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoboReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  base_ = NULL;
  lift_ = NULL;
  sens_ = NULL;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoboReq::~RoboReq() {
  SharedDtor();
}

void RoboReq::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete lift_;
    delete sens_;
    delete data_;
  }
}

void RoboReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoboReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoboReq_descriptor_;
}

const RoboReq& RoboReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robocomms_2eproto();
  return *default_instance_;
}

RoboReq* RoboReq::default_instance_ = NULL;

RoboReq* RoboReq::New() const {
  return new RoboReq;
}

void RoboReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_base()) {
      if (base_ != NULL) base_->::RoboComms::RoboReq_MoveBaseCmd::Clear();
    }
    if (has_lift()) {
      if (lift_ != NULL) lift_->::RoboComms::RoboReq_MoveLiftCmd::Clear();
    }
    if (has_sens()) {
      if (sens_ != NULL) sens_->::RoboComms::RoboReq_MoveSensCmd::Clear();
    }
    if (has_data()) {
      if (data_ != NULL) data_->::RoboComms::RoboReq_DataReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoboReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RoboComms.RoboReq.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RoboComms::RoboReq_Type_IsValid(value)) {
            set_type(static_cast< ::RoboComms::RoboReq_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .RoboComms.RoboReq.MoveBaseCmd base = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lift;
        break;
      }

      // optional .RoboComms.RoboReq.MoveLiftCmd lift = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sens;
        break;
      }

      // optional .RoboComms.RoboReq.MoveSensCmd sens = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sens()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional .RoboComms.RoboReq.DataReq data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoboReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RoboComms.RoboReq.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .RoboComms.RoboReq.MoveBaseCmd base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  // optional .RoboComms.RoboReq.MoveLiftCmd lift = 3;
  if (has_lift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lift(), output);
  }

  // optional .RoboComms.RoboReq.MoveSensCmd sens = 4;
  if (has_sens()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sens(), output);
  }

  // optional .RoboComms.RoboReq.DataReq data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoboReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RoboComms.RoboReq.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .RoboComms.RoboReq.MoveBaseCmd base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  // optional .RoboComms.RoboReq.MoveLiftCmd lift = 3;
  if (has_lift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lift(), target);
  }

  // optional .RoboComms.RoboReq.MoveSensCmd sens = 4;
  if (has_sens()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sens(), target);
  }

  // optional .RoboComms.RoboReq.DataReq data = 5;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoboReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RoboComms.RoboReq.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .RoboComms.RoboReq.MoveBaseCmd base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .RoboComms.RoboReq.MoveLiftCmd lift = 3;
    if (has_lift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lift());
    }

    // optional .RoboComms.RoboReq.MoveSensCmd sens = 4;
    if (has_sens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sens());
    }

    // optional .RoboComms.RoboReq.DataReq data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoboReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoboReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoboReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoboReq::MergeFrom(const RoboReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_base()) {
      mutable_base()->::RoboComms::RoboReq_MoveBaseCmd::MergeFrom(from.base());
    }
    if (from.has_lift()) {
      mutable_lift()->::RoboComms::RoboReq_MoveLiftCmd::MergeFrom(from.lift());
    }
    if (from.has_sens()) {
      mutable_sens()->::RoboComms::RoboReq_MoveSensCmd::MergeFrom(from.sens());
    }
    if (from.has_data()) {
      mutable_data()->::RoboComms::RoboReq_DataReq::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoboReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoboReq::CopyFrom(const RoboReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoboReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoboReq::Swap(RoboReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(base_, other->base_);
    std::swap(lift_, other->lift_);
    std::swap(sens_, other->sens_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoboReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoboReq_descriptor_;
  metadata.reflection = RoboReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RoboRes_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoboRes_Type_descriptor_;
}
bool RoboRes_Type_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RoboRes_Type RoboRes::DATAR;
const RoboRes_Type RoboRes::Type_MIN;
const RoboRes_Type RoboRes::Type_MAX;
const int RoboRes::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RoboRes_DataRes::kResFieldNumber;
#endif  // !_MSC_VER

RoboRes_DataRes::RoboRes_DataRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoboRes_DataRes::InitAsDefaultInstance() {
}

RoboRes_DataRes::RoboRes_DataRes(const RoboRes_DataRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoboRes_DataRes::SharedCtor() {
  _cached_size_ = 0;
  res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoboRes_DataRes::~RoboRes_DataRes() {
  SharedDtor();
}

void RoboRes_DataRes::SharedDtor() {
  if (res_ != &::google::protobuf::internal::kEmptyString) {
    delete res_;
  }
  if (this != default_instance_) {
  }
}

void RoboRes_DataRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoboRes_DataRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoboRes_DataRes_descriptor_;
}

const RoboRes_DataRes& RoboRes_DataRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robocomms_2eproto();
  return *default_instance_;
}

RoboRes_DataRes* RoboRes_DataRes::default_instance_ = NULL;

RoboRes_DataRes* RoboRes_DataRes::New() const {
  return new RoboRes_DataRes;
}

void RoboRes_DataRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_res()) {
      if (res_ != &::google::protobuf::internal::kEmptyString) {
        res_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoboRes_DataRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->res().data(), this->res().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoboRes_DataRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res().data(), this->res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoboRes_DataRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res().data(), this->res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoboRes_DataRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoboRes_DataRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoboRes_DataRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoboRes_DataRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoboRes_DataRes::MergeFrom(const RoboRes_DataRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoboRes_DataRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoboRes_DataRes::CopyFrom(const RoboRes_DataRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoboRes_DataRes::IsInitialized() const {

  return true;
}

void RoboRes_DataRes::Swap(RoboRes_DataRes* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoboRes_DataRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoboRes_DataRes_descriptor_;
  metadata.reflection = RoboRes_DataRes_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RoboRes::kTypeFieldNumber;
const int RoboRes::kDataFieldNumber;
#endif  // !_MSC_VER

RoboRes::RoboRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoboRes::InitAsDefaultInstance() {
  data_ = const_cast< ::RoboComms::RoboRes_DataRes*>(&::RoboComms::RoboRes_DataRes::default_instance());
}

RoboRes::RoboRes(const RoboRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoboRes::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoboRes::~RoboRes() {
  SharedDtor();
}

void RoboRes::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void RoboRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoboRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoboRes_descriptor_;
}

const RoboRes& RoboRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robocomms_2eproto();
  return *default_instance_;
}

RoboRes* RoboRes::default_instance_ = NULL;

RoboRes* RoboRes::New() const {
  return new RoboRes;
}

void RoboRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::RoboComms::RoboRes_DataRes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoboRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RoboComms.RoboRes.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RoboComms::RoboRes_Type_IsValid(value)) {
            set_type(static_cast< ::RoboComms::RoboRes_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .RoboComms.RoboRes.DataRes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoboRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RoboComms.RoboRes.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .RoboComms.RoboRes.DataRes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoboRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RoboComms.RoboRes.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .RoboComms.RoboRes.DataRes data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoboRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RoboComms.RoboRes.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .RoboComms.RoboRes.DataRes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoboRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoboRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoboRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoboRes::MergeFrom(const RoboRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      mutable_data()->::RoboComms::RoboRes_DataRes::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoboRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoboRes::CopyFrom(const RoboRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoboRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoboRes::Swap(RoboRes* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoboRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoboRes_descriptor_;
  metadata.reflection = RoboRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RoboComms

// @@protoc_insertion_point(global_scope)
