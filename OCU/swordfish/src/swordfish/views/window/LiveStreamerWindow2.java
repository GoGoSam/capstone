package swordfish.views.window;

//import swordfish.ui_develop.*;
//import swordfish.*;
//import ij.IJ;
//import java.awt.BorderLayout;
//import java.awt.Canvas;

//import java.awt.Component;
import java.awt.event.KeyListener;
import javax.swing.*;
import java.awt.event.*;
import java.awt.Container.*;
//import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FileDialog;
import java.awt.Graphics2D;
//import java.awt.Font;
//import java.awt.LayoutManager;
import java.awt.event.KeyEvent.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
//import java.net.MalformedURLException;
//import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import org.gstreamer.State;
import org.gstreamer.swing.VideoPlayer;
//import javax.swing.border.TitledBorder;
//import swordfish.controllers.RobotController;
import swordfish.views.dialog.LogIn;
import swordfish.views.MobileDirectionDisplayKeyboard;
//import swordfish.applications.LiveStreamer;
import swordfish.controllers.RobotController;
import swordfish.controllers.VideoStreamer;
//import java.io.*;

/**
 *
 * @author jrob
 */
public class LiveStreamerWindow2 extends JFrame
      implements KeyListener, WindowListener {

//    private JFrame frmLiveStreamerDisplay;
    /**
     * Creates new form LiveStreamerWindow
     */
    int[] pointer = new int[1];
    private JLabel icon_down;
    private JLabel icon_left;
    private JLabel icon_right;
    private JLabel icon_up;
    private JPanel p_directionals;
    private boolean do_debug = true;
    boolean[] f_video_loaded = new boolean[1];
    private VideoStreamer vs;
    ImageTaker it;
//    private RobotController rc;
//    MobileDirectionDisplayKeyboard mddk = new MobileDirectionDisplayKeyboard();
//    MyMediaPlayer media_pan;
    String icon_path = System.getProperty("user.dir") + "/resources/";
    String image_out_path = System.getProperty("user.home") + "/Desktop/";
    public LiveStreamerWindow2() {
//        super("ddd");

        initComponents();
        initContainer();
        f_video_loaded[0] = false;
        setResizable(false);
        it = new ImageTaker(image_out_path);
    }

    public LiveStreamerWindow2(JFrame ui) {
//        super("ddd");

        initComponents();
        initContainer();

        f_video_loaded[0] = false;
        setResizable(false);

    }

    public void setVideoStreamer(VideoStreamer instance) {
        vs = instance;
    }

    public void checkCC(boolean checkit) {
//        if (checkit) {
//            cb_controller_connected.setSelected(true);
//        } else {
//            cb_controller_connected.setSelected(false);
//
//        }

    }

    public void setVideoFlag(boolean state)
    { // used for component states to be set
        f_video_loaded[0] = state;
        
    }
    public void set_button_states() {
//        b_vid_ff.setEnabled(f_video_loaded[0]);
//        b_vid_mute.setEnabled(f_video_loaded[0]);
//        b_vid_pause.setEnabled(f_video_loaded[0]);
//        b_vid_play.setEnabled(f_video_loaded[0]);
////        b_vid_rw.setEnabled(f_video_loaded[0]);
//        b_vid_stop.setEnabled(f_video_loaded[0]);
//        b_capture_moment.setEnabled(f_video_loaded[0]);
//        cb_controller_connected.setSelected(rc.isConnected());
    }

    // <editor-fold defaultstate="collapsed" desc="initContainer">
    private void initContainer() {
//        addKeyListener(IJ.getInstance());

        setResizable(false);
//        this.pack();
        addWindowListener(this);
        set_button_states();
    }

    // </editor-fold>

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        pan_root = new javax.swing.JPanel();
        pan_center = new javax.swing.JPanel();
        p_mediaPlayer = new javax.swing.JPanel();

        jMenuItem1.setText("jMenuItem1");

        jScrollPane1.setViewportView(jTextPane1);

        jMenu2.setText("File");
        jMenuBar2.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar2.add(jMenu3);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inspector Robot");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        pan_root.setPreferredSize(new java.awt.Dimension(900, 745));

        p_mediaPlayer.setMaximumSize(new java.awt.Dimension(350, 32767));
        p_mediaPlayer.setPreferredSize(new java.awt.Dimension(450, 250));

        javax.swing.GroupLayout p_mediaPlayerLayout = new javax.swing.GroupLayout(p_mediaPlayer);
        p_mediaPlayer.setLayout(p_mediaPlayerLayout);
        p_mediaPlayerLayout.setHorizontalGroup(
            p_mediaPlayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 546, Short.MAX_VALUE)
        );
        p_mediaPlayerLayout.setVerticalGroup(
            p_mediaPlayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 316, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pan_centerLayout = new javax.swing.GroupLayout(pan_center);
        pan_center.setLayout(pan_centerLayout);
        pan_centerLayout.setHorizontalGroup(
            pan_centerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pan_centerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(p_mediaPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pan_centerLayout.setVerticalGroup(
            pan_centerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_centerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(p_mediaPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout pan_rootLayout = new javax.swing.GroupLayout(pan_root);
        pan_root.setLayout(pan_rootLayout);
        pan_rootLayout.setHorizontalGroup(
            pan_rootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_rootLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(pan_center, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pan_rootLayout.setVerticalGroup(
            pan_rootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_rootLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(pan_center, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(pan_root, new java.awt.GridBagConstraints());

        setBounds(0, 0, 586, 374);
    }// </editor-fold>//GEN-END:initComponents



    private void logging_on(ActionEvent evt) {
//        evt.equals(evt);
        System.out.println(evt.getSource().toString());
        if (logger.get(0) == evt.getSource()) {
            if (do_debug) {
                System.out.println("Login");
            }

        } else if (logger.get(1) == evt.getSource()) {
            if (do_debug) {
                System.out.println("Register");
            }
        } else {
            if (do_debug) {
                System.out.println("Cancel");
            }
        }
    }
    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="WindowListeners">
    @Override
    public void windowClosing(WindowEvent e) {
    }

    @Override
    public void windowClosed(WindowEvent e) {
    }

    @Override
    public void windowOpened(WindowEvent e) {
    }

    @Override
    public void windowIconified(WindowEvent e) {
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
    }

    @Override
    public void windowActivated(WindowEvent e) {
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
    }

//    public void windowGainedFocus(WindowEvent e) {    }
//    public void windowLostFocus(WindowEvent e) {
//    }
//
//    public void windowStateChanged(WindowEvent e) {
//    }
    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="KeyListeners">
    @Override
    public void keyTyped(KeyEvent e) {
    }

    /**
     * Handle the key pressed event from the text field. The function checks if
     * event was triggered via arrow keys on keypad. If so, the corresponding
     * arrow icon will be enabled, i.e., will display its true color.
     */
    @Override
    public void keyPressed(KeyEvent e) {

        if (do_debug) {
            System.out.println("Key Press: " + e.toString());
        }

        int location = e.getKeyCode();

        if (location == KeyEvent.VK_LEFT) {
            icon_left.setEnabled(true);
        } else if (location == KeyEvent.VK_RIGHT) {
            icon_right.setEnabled(true);
        } else if (location == KeyEvent.VK_UP) {

            icon_up.setEnabled(true);
        } else if (location == KeyEvent.VK_DOWN) {
            icon_down.setEnabled(true);
        }
    }

    /**
     * Handle the key released event from the text field. The function checks if
     * event was triggered via arrow keys on keypad. If so, the corresponding
     * arrow icon will be disabled, i.e., will lose its true color set when key
     * was pressed.
     */
    @Override
    public void keyReleased(KeyEvent e) {
        if (do_debug) {
            System.out.println("Key Released: " + e.toString());
        }

        int location = e.getKeyCode();

        if (location == KeyEvent.VK_LEFT) {
            icon_left.setEnabled(false);
        } else if (location == KeyEvent.VK_RIGHT) {
            icon_right.setEnabled(false);
        } else if (location == KeyEvent.VK_UP) {

            icon_up.setEnabled(false);
        } else if (location == KeyEvent.VK_DOWN) {
            icon_down.setEnabled(false);
        }
    }
    // </editor-fold>
    /* Create and display the form */

    /**
     * Launch the application.
     */
    /*
     public static void main(String[] args) {
     EventQueue.invokeLater(new Runnable() {
     public void run() {
     try {
     LiveStreamerWindow window = new LiveStreamerWindow();
     window.frmLiveStreamerDisplay.setVisible(true);
     } catch (Exception e) {
     e.printStackTrace();
     }
     }
     });
     }*/
//        java.awt.EventQueue.invokeLater(
//                new Runnable() {
//            @Override
//            public void run() {
//                new LiveStreamerWindow().setVisible(true);
////                new MobileDirectionDisplay().setVisible(true);
//            }
//        });
    
    
    
    class ImageTaker    
    {
        String dir_out;
        public ImageTaker(String dir_path){  
            dir_out = dir_path;
        }

        private void captureImage(JPanel p_in) {
            BufferedImage im = new BufferedImage(p_in.getWidth(),p_in.getHeight(), BufferedImage.TYPE_INT_RGB);
            
            Graphics2D g2 = im.createGraphics();
            p_in.paint(g2);
            String fname = dir_out.concat("test.jpg");
            im = im.getSubimage(10, 10, im.getWidth() - 10, im.getHeight() - 10);
            try {
                ImageIO.write(im, "JPG", new File(fname));
                
            } catch (IOException ex) {
                Logger.getLogger(LiveStreamerWindow2.class.getName()).log(Level.SEVERE, null, ex);
            }
//            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
        
        
    }
    private ArrayList<JButton> logger;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextPane jTextPane1;
    public javax.swing.JPanel p_mediaPlayer;
    private javax.swing.JPanel pan_center;
    private javax.swing.JPanel pan_root;
    // End of variables declaration//GEN-END:variables
//    private void printn(String property) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//    }
}
