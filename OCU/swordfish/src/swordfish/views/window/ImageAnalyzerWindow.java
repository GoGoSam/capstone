package swordfish.views.window;

import ij.IJ;
import ij.ImagePlus;
import ij.gui.ImageCanvas;
import ij.process.ImageProcessor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JPanel;


/**
 *
 * @author jrob
 */
public class ImageAnalyzerWindow extends javax.swing.JFrame
        implements ActionListener {

    ImagePlus im_plus = null;           // This will be the original
    ImagePlus im_plus_rgb = null;       // in the case RGB type is set as conversion
    ImagePlus im_plus_gray = null;      // --- 8-Bit Gray
    ImageCanvas canvas;
    boolean[] is_im_loaded = new boolean[1];
    boolean[] color_scaler = new boolean[2]; /*  0 - RGB; 1 - Gray, 8 Bit    */

    double[] orig_min_max = new double[2];
    String icon_path = System.getProperty("user.dir") + "/resources/";
    
//    String imagej_app_fpath =
//            "/Applications/ImageJ/ImageJ64.app/Contents/MacOS/JavaApplicationStub";
    
    
    String image_name = icon_path + "test_images_n_template_im/hanger_test_image.jpg";
    
    int IMG_WIDTH = 540;    // pixels
    int IMG_HEIGHT = 310;   // pixels
    boolean do_debug = true;

    /**
     * Creates new form ImageAnalyzerWindow
     */
    public ImageAnalyzerWindow() {
        super("Image Analyzer and Processor");

        initComponents();

        configureComponents();
        
        this.setResizable(false);
        
        // set flags
        is_im_loaded[0] = false;
        color_scaler[0] = false;
        color_scaler[1] = false;

        set_button_states();
    }
    
        /**
     * Creates new form ImageAnalyzerWindow with image of fname opened on panel
     */
    public ImageAnalyzerWindow(String fname) {
        super("Image Analyzer and Processor");

        initComponents();

        image_name = fname;
        configureComponents();
        this.setResizable(false);
        // set flags
        is_im_loaded[0] = false;
        
        color_scaler[0] = false;
        color_scaler[1] = false;
        

        is_im_loaded[0] = load_image(fname);


        
        set_button_states();        
    
    }                                      
                                    



    /**
     * Method added to configure the components not handled in (code -
     * generated) initComponents().
     *
     */
    private void configureComponents() {
        bg_image_type = new ButtonGroup();
        bg_image_type.add(rb_grayscale32);
        bg_image_type.add(rb_rgb32);

    }
    // <editor-fold defaultstate="collapsed" desc="initComponents">

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pan_image = new javax.swing.JPanel();
        lab_image = new javax.swing.JLabel();
        pan_utils = new javax.swing.JPanel();
        b_save = new javax.swing.JButton();
        b_load = new javax.swing.JButton();
        b_close = new javax.swing.JButton();
        pan_tools = new javax.swing.JPanel();
        rb_rgb32 = new javax.swing.JRadioButton();
        rb_grayscale32 = new javax.swing.JRadioButton();
        slider_brightness = new javax.swing.JSlider();
        slider_contrast = new javax.swing.JSlider();
        l_brightness = new javax.swing.JLabel();
        l_contrast = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        b_open = new javax.swing.JMenuItem();
        mnu_save = new javax.swing.JMenuItem();
        mnu_saveas = new javax.swing.JMenuItem();
        mnu_quit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pan_image.setPreferredSize(new java.awt.Dimension(450, 250));

        lab_image.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lab_image.setText(".");
        lab_image.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout pan_imageLayout = new javax.swing.GroupLayout(pan_image);
        pan_image.setLayout(pan_imageLayout);
        pan_imageLayout.setHorizontalGroup(
            pan_imageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_imageLayout.createSequentialGroup()
                .addComponent(lab_image)
                .addContainerGap(535, Short.MAX_VALUE))
        );
        pan_imageLayout.setVerticalGroup(
            pan_imageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_imageLayout.createSequentialGroup()
                .addComponent(lab_image)
                .addContainerGap(316, Short.MAX_VALUE))
        );

        b_save.setText("Save");
        b_save.setEnabled(false);

        b_load.setText("Load");
        b_load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_loadActionPerformed(evt);
            }
        });

        b_close.setText("Close");
        b_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_closeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pan_utilsLayout = new javax.swing.GroupLayout(pan_utils);
        pan_utils.setLayout(pan_utilsLayout);
        pan_utilsLayout.setHorizontalGroup(
            pan_utilsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_utilsLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(pan_utilsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b_load)
                    .addComponent(b_save)
                    .addComponent(b_close))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pan_utilsLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {b_close, b_load, b_save});

        pan_utilsLayout.setVerticalGroup(
            pan_utilsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pan_utilsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(b_save)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(b_load, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(b_close)
                .addContainerGap())
        );

        pan_utilsLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {b_close, b_load, b_save});

        rb_rgb32.setText("RGB");
        rb_rgb32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_rgb32ActionPerformed(evt);
            }
        });

        rb_grayscale32.setText("Gray-Scale");
        rb_grayscale32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_grayscale32ActionPerformed(evt);
            }
        });

        slider_brightness.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                slider_brightnessCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        slider_contrast.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                slider_brightnessCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        l_brightness.setText("Brightness");

        l_contrast.setText("Contrast");

        javax.swing.GroupLayout pan_toolsLayout = new javax.swing.GroupLayout(pan_tools);
        pan_tools.setLayout(pan_toolsLayout);
        pan_toolsLayout.setHorizontalGroup(
            pan_toolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_toolsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pan_toolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l_brightness)
                    .addComponent(l_contrast)
                    .addGroup(pan_toolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(slider_brightness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pan_toolsLayout.createSequentialGroup()
                            .addComponent(rb_rgb32)
                            .addGap(88, 88, 88)
                            .addComponent(rb_grayscale32))
                        .addComponent(slider_contrast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pan_toolsLayout.setVerticalGroup(
            pan_toolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_toolsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pan_toolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rb_rgb32)
                    .addComponent(rb_grayscale32))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(l_brightness)
                .addGap(3, 3, 3)
                .addComponent(slider_brightness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l_contrast)
                .addGap(3, 3, 3)
                .addComponent(slider_contrast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });

        b_open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.META_MASK));
        b_open.setText("Open");
        b_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_openActionPerformed(evt);
            }
        });
        jMenu1.add(b_open);

        mnu_save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.META_MASK));
        mnu_save.setText("Save");
        mnu_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_saveActionPerformed(evt);
            }
        });
        jMenu1.add(mnu_save);

        mnu_saveas.setText("Save As...");
        mnu_saveas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_saveasActionPerformed(evt);
            }
        });
        jMenu1.add(mnu_saveas);

        mnu_quit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.META_MASK));
        mnu_quit.setText("Quit");
        mnu_quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_quitActionPerformed(evt);
            }
        });
        jMenu1.add(mnu_quit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pan_image, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pan_utils, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pan_tools, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pan_image, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pan_tools, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pan_utils, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="set_button_states">
    private void set_button_states() {
        if (is_im_loaded[0]) {

            if (do_debug) {
                System.out.println("set_button_states(): Image loaded");
            }


            rb_grayscale32.setEnabled(true);
            rb_rgb32.setEnabled(true);
            
            slider_contrast.setEnabled(true);

            slider_brightness.setEnabled(true);
            b_save.setEnabled(true);
            

        } else {

            if (do_debug) {
                System.out.println("set_button_states(): Image not loaded");
            }
            rb_grayscale32.setSelected(false);
            rb_grayscale32.setEnabled(false);
            rb_rgb32.setSelected(false);
            rb_rgb32.setEnabled(false);
            slider_contrast.setEnabled(false);
            slider_brightness.setEnabled(false);
            b_save.setEnabled(false);
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="ActionPerformed(s)">
    private void rb_rgb32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_rgb32ActionPerformed
        if (do_debug) {
            System.out.println("RGB RadioButton was pressed");

        }
        im_plus_rgb = im_plus.duplicate();
//            IJ.run(im_plus_gray, "8-bit", "");
//            im_plus.hide();
//            im_plus_rgb.show();

        lab_image.setIcon(new ImageIcon(im_plus_rgb.getImage())); // NOI18N


    
//            im_plus_gray.show();
        /*
         int autoThreshold = 0;
         int AUTO_THRESHOLD = 5000;

         //            Image imp = im_plus.getImage();
         Calibration cal = im_plus.getCalibration();
         //            im_plus.setCalibration(cal);
         //            imp.setCalibration("None");
         im_plus.setCalibration(null);
         ImageStatistics stats = im_plus.getStatistics();// # get uncalibrated stats
         im_plus.setCalibration(cal);
         int limit = (stats.pixelCount / 10);
         int[] histogram = stats.histogram;*/
    }//GEN-LAST:event_rb_rgb32ActionPerformed

    private void b_loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_loadActionPerformed
        // method called as "Load" triggers event
        is_im_loaded[0] = load_image(image_name);
        set_button_states();    }//GEN-LAST:event_b_loadActionPerformed

    private void rb_grayscale32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_grayscale32ActionPerformed

        if (do_debug) {
            System.out.println("8 - bit RadioButton was pressed");
        }
        im_plus_gray = im_plus.duplicate();
        IJ.run(im_plus_gray, "32-bit", "");
//            im_plus.hide();
//            im_plus_gray.show();
        lab_image.setIcon(new ImageIcon(im_plus_gray.getImage())); // NOI18N

    }//GEN-LAST:event_rb_grayscale32ActionPerformed

    private void slider_brightnessCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_slider_brightnessCaretPositionChanged
        // TODO add your handling code here:
        
        int val = slider_brightness.getValue();
        
        IJ.run(im_plus_gray, "in","");
        im_plus_gray.updateAndDraw(); 
        
    }//GEN-LAST:event_slider_brightnessCaretPositionChanged

    private void b_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_closeActionPerformed
        // TODO add your handling code here:
                  
        IJ.run(im_plus_rgb, "Enhance Contrast", "saturated=4 normalize");
im_plus_rgb.repaintWindow();
im_plus_rgb.updateAndDraw(); 
            
    }//GEN-LAST:event_b_closeActionPerformed

    private void mnu_saveasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_saveasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnu_saveasActionPerformed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_openActionPerformed

    private void mnu_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_saveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnu_saveActionPerformed

    private void b_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_openActionPerformed

        String cur_dir = IJ.getDirectory("current");
        JFileChooser fileopen = new JFileChooser(cur_dir);

        int ret = fileopen.showDialog(new JPanel(), "Open file");

        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fileopen.getSelectedFile();

            if (file.isFile()) {
                String fpath = file.getPath();
                image_name = fpath;
                is_im_loaded[0] = load_image(image_name);
//                im_plus = IJ.openImage(fpath);

//                im_plus.show();
//                is_im_loaded[0] = im_plus != null;
                set_button_states();
                //This is where a real application would open the file.

                if (do_debug) {
                    System.out.println("Opening: " + fpath);
                }

            } else {

                if (do_debug) {
                    System.out.println("Open command cancelled by user.");
                }

            }

        } else if (ret == JFileChooser.CANCEL_OPTION) {

            if (do_debug) {
                System.out.print("user cancelled from 'open' dialog box");
            }

        } else {
            if (do_debug) {
                System.out.print("not approved or cancelled... sweet");
            }
        }

    }//GEN-LAST:event_b_openActionPerformed

    private void mnu_quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_quitActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_mnu_quitActionPerformed
// </editor-fold>

    /**
     * Sets image_plus to the size of image canvas (default, globally defined)
     */
    private void setImageDefaultSize() {
        // size of image is resized
        ImageProcessor ip_big = im_plus.getProcessor();
        ip_big.setInterpolate(true);
        
        ImageProcessor ip_small = ip_big.resize(IMG_WIDTH, IMG_HEIGHT);
        ImagePlus small = new ImagePlus("small", ip_small);
        im_plus = small;

    }

    /**
     * Method to fetch image and covert to ImagePlus.
     *
     * @param fpath - filepath to image
     * @return - true if successful; else, returns false.
     */
    private boolean load_image(String fpath) {

        im_plus = IJ.openImage(fpath);
        //    im_plus.show();   uncomment to open image in seperate window **

        if (im_plus == null) {
            // exit (false) is image pointer is null
            return false;
        }

        setImageDefaultSize();  // set to size of panel

        // Set label with ImageIcon
        lab_image.setText(""); // initializes with value "." for GUIbuiler edits
        lab_image.setIcon(new ImageIcon(im_plus.getImage()));

        ImageProcessor proc = im_plus.getProcessor();

        orig_min_max[0] = proc.getMin();
        orig_min_max[1] = proc.getMax();

          
        im_plus_rgb = im_plus.duplicate();         
        lab_image.setIcon(new ImageIcon(im_plus_rgb.getImage()));            
        rb_rgb32.setSelected(true);
        
        return true;
    }

    // <editor-fold defaultstate="collapsed" desc="Main">
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                String imagepath = "/home/sabertooth/Desktop/test.png";
                
                new ImageAnalyzerWindow(imagepath).setVisible(true);
            }
        });
    }// </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Declare Local Components">
    private ButtonGroup bg_image_type;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_close;
    private javax.swing.JButton b_load;
    private javax.swing.JMenuItem b_open;
    private javax.swing.JButton b_save;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel l_brightness;
    private javax.swing.JLabel l_contrast;
    private javax.swing.JLabel lab_image;
    private javax.swing.JMenuItem mnu_quit;
    private javax.swing.JMenuItem mnu_save;
    private javax.swing.JMenuItem mnu_saveas;
    private javax.swing.JPanel pan_image;
    private javax.swing.JPanel pan_tools;
    private javax.swing.JPanel pan_utils;
    private javax.swing.JRadioButton rb_grayscale32;
    private javax.swing.JRadioButton rb_rgb32;
    private javax.swing.JSlider slider_brightness;
    private javax.swing.JSlider slider_contrast;
    // End of variables declaration//GEN-END:variables
// </editor-fold>

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
